DROP DATABASE IF EXISTS LIBRARY;
CREATE DATABASE LIBRARY;
USE LIBRARY;

CREATE TABLE Category (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE Book (
    BookID INT PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    CategoryID INT,
    FOREIGN KEY (CategoryID) REFERENCES Category(id)
);

CREATE TABLE Author (
    AuthorID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Bio TEXT
);

CREATE TABLE BookAuthor (
    BookID INT,
    AuthorID INT,
    PRIMARY KEY (BookID, AuthorID),
    FOREIGN KEY (BookID) REFERENCES Book(BookID),
    FOREIGN KEY (AuthorID) REFERENCES Author(AuthorID)
);

CREATE TABLE Member (
    MemberID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE,
    Phone VARCHAR(15),
    Address TEXT
);

CREATE TABLE Loan (
    LoanID INT PRIMARY KEY,
    BookID INT,
    MemberID INT,
    LoanDate DATE NOT NULL,
    DueDate DATE NOT NULL,
    ReturnDate DATE,
    FOREIGN KEY (BookID) REFERENCES Book(BookID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

INSERT INTO Category VALUES
(1,'Science Fiction'),
(2,'History'),
(3,'Programming'),
(4,'Philosophy'),
(5,'Biographies');

-- Added extra books so some categories have >1 book
INSERT INTO Book VALUES
(103,'Dune', 1),
(104,'Sapiens', 2),
(102,'Python Crash Course', 3),
(107,'Meditations', 4),
(101,'Steve Jobs', 5),
(108,'Foundation', 1), 
(109,'Homo Deus', 2);

INSERT INTO Author VALUES
(501, 'Frank Herbert', 'Author of the Dune series, known for science fiction.'),
(502, 'Yuval Noah Harari', 'Historian and author of Sapiens and Homo Deus.'),
(503, 'Eric Matthes', 'Python educator and author of Python Crash Course.'),
(504, 'Marcus Aurelius', 'Roman emperor and Stoic philosopher.'),
(505, 'Walter Isaacson', 'Biographer of Steve Jobs and other innovators.'),
(506, 'George Orwell', 'Author of 1984 and Animal Farm.'),
(507, 'Robert C. Martin', 'Known for Clean Code and software engineering principles.'),
(508, 'Isaac Asimov', 'Author of Foundation series.');

INSERT INTO BookAuthor VALUES
(103, 501), 
(104, 502),  
(102, 503),  
(107, 504),  
(101, 505),  
(103, 506), 
(101, 507),
(108, 508),
(109, 502);  

INSERT INTO Member VALUES
(201, 'Arjun Mehta', 'arjun@gmail.com', '9876543210', '45 MG Road, Delhi'),
(202, 'Priya Nair', 'priya@outlook.com', '9123456789', '22 Indiranagar, Bangalore'),
(203, 'Ravi Kumar', 'ravi.k@domain.com', '9988776655', '78 Ashok Nagar, Hyderabad'),
(204, 'Neha Sharma', 'neha.sharma@abc.com', '7894561230', '9 Banjara Hills, Hyderabad'),
(205, 'Karan Patel', 'karan.p@gmail.com', '9001122334', '101 CG Road, Ahmedabad'),
(206, 'Meena Gupta', 'meena@gmail.com', '9012345678', '50 RK Puram, Delhi');

-- Adjusted dates so loan durations vary more (some >5 days)
INSERT INTO Loan VALUES
(301, 101, 202, '2025-08-01', '2025-08-10', '2025-08-09'),
(302, 103, 201, '2025-08-02', '2025-08-15', '2025-08-14'),
(303, 102, 204, '2025-08-03', '2025-08-15', NULL),
(304, 102, 203, '2025-08-01', '2025-08-12', '2025-08-10'),
(305, 104, 205, '2025-08-04', '2025-08-12', '2025-08-12'),
(306, 103, 201, '2025-08-04', '2025-08-18', NULL),
(307, 108, 206, '2025-08-05', '2025-08-16', '2025-08-14'),
(308, 109, 202, '2025-08-06', '2025-08-20', '2025-08-18');

UPDATE Member SET Phone = '9999999999' WHERE MemberID = 201;

SELECT c.name AS Category, COUNT(*) AS BookCount
FROM Book b
JOIN Category c ON b.CategoryID = c.id
GROUP BY c.name;

SELECT c.name AS Category, COUNT(*) AS BookCount
FROM Book b
JOIN Category c ON b.CategoryID = c.id
GROUP BY c.name
HAVING COUNT(*) > 1;

SELECT ROUND(AVG(DATEDIFF(DueDate, LoanDate)), 2) AS AvgLoanDuration
FROM Loan;

SELECT m.Name, COUNT(l.LoanID) AS TotalLoans
FROM Member m
JOIN Loan l ON m.MemberID = l.MemberID
GROUP BY m.Name
ORDER BY TotalLoans DESC;

SELECT COUNT(DISTINCT BookID) AS DistinctBooksLoaned
FROM Loan;

SELECT m.Name, SUM(DATEDIFF(ReturnDate, LoanDate)) AS TotalDaysLoaned
FROM Loan l
JOIN Member m ON l.MemberID = m.MemberID
WHERE ReturnDate IS NOT NULL
GROUP BY m.Name
ORDER BY TotalDaysLoaned DESC;

SELECT c.name AS Category, ROUND(AVG(DATEDIFF(ReturnDate, LoanDate)), 1) AS AvgDaysLoaned
FROM Loan l
JOIN Book b ON l.BookID = b.BookID
JOIN Category c ON b.CategoryID = c.id
WHERE ReturnDate IS NOT NULL
GROUP BY c.name
HAVING AvgDaysLoaned > 5;

SELECT m.Name, COUNT(DISTINCT l.BookID) AS DistinctBooks
FROM Member m
JOIN Loan l ON m.MemberID = l.MemberID
GROUP BY m.Name
HAVING COUNT(DISTINCT l.BookID) > 1;
